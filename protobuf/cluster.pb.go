// Code generated by protoc-gen-go. DO NOT EDIT.
// source: cluster.proto

package anndb_pb

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Node struct {
	Id                   uint64   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Address              string   `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Node) Reset()         { *m = Node{} }
func (m *Node) String() string { return proto.CompactTextString(m) }
func (*Node) ProtoMessage()    {}
func (*Node) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cfb3b8ec240c376, []int{0}
}

func (m *Node) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Node.Unmarshal(m, b)
}
func (m *Node) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Node.Marshal(b, m, deterministic)
}
func (m *Node) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Node.Merge(m, src)
}
func (m *Node) XXX_Size() int {
	return xxx_messageInfo_Node.Size(m)
}
func (m *Node) XXX_DiscardUnknown() {
	xxx_messageInfo_Node.DiscardUnknown(m)
}

var xxx_messageInfo_Node proto.InternalMessageInfo

func (m *Node) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Node) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type NodeLoadInfo struct {
	Uptime               uint64   `protobuf:"varint,1,opt,name=uptime,proto3" json:"uptime,omitempty"`
	CpuLoad1             float64  `protobuf:"fixed64,2,opt,name=cpu_load1,json=cpuLoad1,proto3" json:"cpu_load1,omitempty"`
	CpuLoad5             float64  `protobuf:"fixed64,3,opt,name=cpu_load5,json=cpuLoad5,proto3" json:"cpu_load5,omitempty"`
	CpuLoad15            float64  `protobuf:"fixed64,4,opt,name=cpu_load15,json=cpuLoad15,proto3" json:"cpu_load15,omitempty"`
	MemTotal             uint64   `protobuf:"varint,5,opt,name=mem_total,json=memTotal,proto3" json:"mem_total,omitempty"`
	MemAvailable         uint64   `protobuf:"varint,6,opt,name=mem_available,json=memAvailable,proto3" json:"mem_available,omitempty"`
	MemUsed              uint64   `protobuf:"varint,7,opt,name=mem_used,json=memUsed,proto3" json:"mem_used,omitempty"`
	MemFree              uint64   `protobuf:"varint,8,opt,name=mem_free,json=memFree,proto3" json:"mem_free,omitempty"`
	MemUsedPercent       float64  `protobuf:"fixed64,9,opt,name=mem_used_percent,json=memUsedPercent,proto3" json:"mem_used_percent,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NodeLoadInfo) Reset()         { *m = NodeLoadInfo{} }
func (m *NodeLoadInfo) String() string { return proto.CompactTextString(m) }
func (*NodeLoadInfo) ProtoMessage()    {}
func (*NodeLoadInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cfb3b8ec240c376, []int{1}
}

func (m *NodeLoadInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NodeLoadInfo.Unmarshal(m, b)
}
func (m *NodeLoadInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NodeLoadInfo.Marshal(b, m, deterministic)
}
func (m *NodeLoadInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeLoadInfo.Merge(m, src)
}
func (m *NodeLoadInfo) XXX_Size() int {
	return xxx_messageInfo_NodeLoadInfo.Size(m)
}
func (m *NodeLoadInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeLoadInfo.DiscardUnknown(m)
}

var xxx_messageInfo_NodeLoadInfo proto.InternalMessageInfo

func (m *NodeLoadInfo) GetUptime() uint64 {
	if m != nil {
		return m.Uptime
	}
	return 0
}

func (m *NodeLoadInfo) GetCpuLoad1() float64 {
	if m != nil {
		return m.CpuLoad1
	}
	return 0
}

func (m *NodeLoadInfo) GetCpuLoad5() float64 {
	if m != nil {
		return m.CpuLoad5
	}
	return 0
}

func (m *NodeLoadInfo) GetCpuLoad15() float64 {
	if m != nil {
		return m.CpuLoad15
	}
	return 0
}

func (m *NodeLoadInfo) GetMemTotal() uint64 {
	if m != nil {
		return m.MemTotal
	}
	return 0
}

func (m *NodeLoadInfo) GetMemAvailable() uint64 {
	if m != nil {
		return m.MemAvailable
	}
	return 0
}

func (m *NodeLoadInfo) GetMemUsed() uint64 {
	if m != nil {
		return m.MemUsed
	}
	return 0
}

func (m *NodeLoadInfo) GetMemFree() uint64 {
	if m != nil {
		return m.MemFree
	}
	return 0
}

func (m *NodeLoadInfo) GetMemUsedPercent() float64 {
	if m != nil {
		return m.MemUsedPercent
	}
	return 0
}

func init() {
	proto.RegisterType((*Node)(nil), "anndb_pb.Node")
	proto.RegisterType((*NodeLoadInfo)(nil), "anndb_pb.NodeLoadInfo")
}

func init() {
	proto.RegisterFile("cluster.proto", fileDescriptor_3cfb3b8ec240c376)
}

var fileDescriptor_3cfb3b8ec240c376 = []byte{
	// 351 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x92, 0xc1, 0x6a, 0xea, 0x40,
	0x14, 0x86, 0x49, 0xae, 0xd7, 0x24, 0x07, 0x95, 0xcb, 0x2c, 0x64, 0xae, 0xa5, 0x20, 0x76, 0x23,
	0x14, 0x44, 0xdb, 0x66, 0xd3, 0x9d, 0x8b, 0x16, 0x0a, 0x5a, 0x4a, 0x68, 0xd7, 0x61, 0x92, 0x39,
	0x4a, 0x20, 0x93, 0x09, 0x33, 0x13, 0xa1, 0x8f, 0xd3, 0x77, 0xeb, 0x83, 0x94, 0x4c, 0x8c, 0x56,
	0xd0, 0xe5, 0xf9, 0xbf, 0xff, 0x9b, 0x19, 0x72, 0x02, 0xfd, 0x34, 0xaf, 0xb4, 0x41, 0x35, 0x2b,
	0x95, 0x34, 0x92, 0xf8, 0xac, 0x28, 0x78, 0x12, 0x97, 0xc9, 0x08, 0x52, 0xa9, 0xb0, 0x49, 0x27,
	0x73, 0xe8, 0xbc, 0x4a, 0x8e, 0x64, 0x00, 0x6e, 0xc6, 0xa9, 0x33, 0x76, 0xa6, 0x9d, 0xc8, 0xcd,
	0x38, 0xa1, 0xe0, 0x31, 0xce, 0x15, 0x6a, 0x4d, 0xdd, 0xb1, 0x33, 0x0d, 0xa2, 0x76, 0x9c, 0x7c,
	0xb9, 0xd0, 0xab, 0x95, 0x95, 0x64, 0xfc, 0xa5, 0xd8, 0x48, 0x32, 0x84, 0x6e, 0x55, 0x9a, 0x4c,
	0xe0, 0x5e, 0xdf, 0x4f, 0xe4, 0x0a, 0x82, 0xb4, 0xac, 0xe2, 0x5c, 0x32, 0xbe, 0xb0, 0x87, 0x38,
	0x91, 0x9f, 0x96, 0x55, 0xed, 0x2d, 0x7e, 0xc3, 0x90, 0xfe, 0x39, 0x81, 0x21, 0xb9, 0x06, 0x38,
	0x98, 0x21, 0xed, 0x58, 0x1a, 0xb4, 0x6a, 0x58, 0xbb, 0x02, 0x45, 0x6c, 0xa4, 0x61, 0x39, 0xfd,
	0x6b, 0xef, 0xf4, 0x05, 0x8a, 0xf7, 0x7a, 0x26, 0x37, 0xd0, 0xaf, 0x21, 0xdb, 0xb1, 0x2c, 0x67,
	0x49, 0x8e, 0xb4, 0x6b, 0x0b, 0x3d, 0x81, 0x62, 0xd9, 0x66, 0xe4, 0x3f, 0xd4, 0x42, 0x5c, 0x69,
	0xe4, 0xd4, 0xb3, 0xdc, 0x13, 0x28, 0x3e, 0x34, 0xf2, 0x16, 0x6d, 0x14, 0x22, 0xf5, 0x0f, 0xe8,
	0x59, 0x21, 0x92, 0x29, 0xfc, 0x6b, 0xad, 0xb8, 0x44, 0x95, 0x62, 0x61, 0x68, 0x60, 0x1f, 0x37,
	0xd8, 0xdb, 0x6f, 0x4d, 0x7a, 0xf7, 0xed, 0x34, 0xdf, 0x48, 0xaf, 0x59, 0xc1, 0xb6, 0xa8, 0x48,
	0x08, 0xc1, 0x2a, 0xd3, 0xc6, 0x66, 0x64, 0x38, 0x6b, 0x57, 0x31, 0x7b, 0x12, 0xa5, 0xf9, 0x5c,
	0xa3, 0xd6, 0x6c, 0x8b, 0xa3, 0xc1, 0x31, 0xaf, 0x8b, 0x73, 0x87, 0xdc, 0x82, 0xb7, 0xe4, 0xbc,
	0x59, 0xd0, 0x29, 0x3c, 0x53, 0x7e, 0x00, 0x88, 0x50, 0xc8, 0x1d, 0x9e, 0xed, 0x5f, 0xb8, 0x94,
	0x3c, 0x82, 0x7f, 0xdc, 0xe4, 0x85, 0x87, 0x0d, 0x4f, 0xcf, 0x6a, 0xfb, 0x49, 0xd7, 0xfe, 0x43,
	0xf7, 0x3f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x18, 0xdc, 0x1f, 0x36, 0x6a, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// NodesManagerClient is the client API for NodesManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type NodesManagerClient interface {
	ListNodes(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (NodesManager_ListNodesClient, error)
	AddNode(ctx context.Context, in *Node, opts ...grpc.CallOption) (NodesManager_AddNodeClient, error)
	RemoveNode(ctx context.Context, in *Node, opts ...grpc.CallOption) (*EmptyMessage, error)
	LoadInfo(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*NodeLoadInfo, error)
}

type nodesManagerClient struct {
	cc grpc.ClientConnInterface
}

func NewNodesManagerClient(cc grpc.ClientConnInterface) NodesManagerClient {
	return &nodesManagerClient{cc}
}

func (c *nodesManagerClient) ListNodes(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (NodesManager_ListNodesClient, error) {
	stream, err := c.cc.NewStream(ctx, &_NodesManager_serviceDesc.Streams[0], "/anndb_pb.NodesManager/ListNodes", opts...)
	if err != nil {
		return nil, err
	}
	x := &nodesManagerListNodesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type NodesManager_ListNodesClient interface {
	Recv() (*Node, error)
	grpc.ClientStream
}

type nodesManagerListNodesClient struct {
	grpc.ClientStream
}

func (x *nodesManagerListNodesClient) Recv() (*Node, error) {
	m := new(Node)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *nodesManagerClient) AddNode(ctx context.Context, in *Node, opts ...grpc.CallOption) (NodesManager_AddNodeClient, error) {
	stream, err := c.cc.NewStream(ctx, &_NodesManager_serviceDesc.Streams[1], "/anndb_pb.NodesManager/AddNode", opts...)
	if err != nil {
		return nil, err
	}
	x := &nodesManagerAddNodeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type NodesManager_AddNodeClient interface {
	Recv() (*Node, error)
	grpc.ClientStream
}

type nodesManagerAddNodeClient struct {
	grpc.ClientStream
}

func (x *nodesManagerAddNodeClient) Recv() (*Node, error) {
	m := new(Node)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *nodesManagerClient) RemoveNode(ctx context.Context, in *Node, opts ...grpc.CallOption) (*EmptyMessage, error) {
	out := new(EmptyMessage)
	err := c.cc.Invoke(ctx, "/anndb_pb.NodesManager/RemoveNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodesManagerClient) LoadInfo(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*NodeLoadInfo, error) {
	out := new(NodeLoadInfo)
	err := c.cc.Invoke(ctx, "/anndb_pb.NodesManager/LoadInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NodesManagerServer is the server API for NodesManager service.
type NodesManagerServer interface {
	ListNodes(*EmptyMessage, NodesManager_ListNodesServer) error
	AddNode(*Node, NodesManager_AddNodeServer) error
	RemoveNode(context.Context, *Node) (*EmptyMessage, error)
	LoadInfo(context.Context, *EmptyMessage) (*NodeLoadInfo, error)
}

// UnimplementedNodesManagerServer can be embedded to have forward compatible implementations.
type UnimplementedNodesManagerServer struct {
}

func (*UnimplementedNodesManagerServer) ListNodes(req *EmptyMessage, srv NodesManager_ListNodesServer) error {
	return status.Errorf(codes.Unimplemented, "method ListNodes not implemented")
}
func (*UnimplementedNodesManagerServer) AddNode(req *Node, srv NodesManager_AddNodeServer) error {
	return status.Errorf(codes.Unimplemented, "method AddNode not implemented")
}
func (*UnimplementedNodesManagerServer) RemoveNode(ctx context.Context, req *Node) (*EmptyMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveNode not implemented")
}
func (*UnimplementedNodesManagerServer) LoadInfo(ctx context.Context, req *EmptyMessage) (*NodeLoadInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoadInfo not implemented")
}

func RegisterNodesManagerServer(s *grpc.Server, srv NodesManagerServer) {
	s.RegisterService(&_NodesManager_serviceDesc, srv)
}

func _NodesManager_ListNodes_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(EmptyMessage)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(NodesManagerServer).ListNodes(m, &nodesManagerListNodesServer{stream})
}

type NodesManager_ListNodesServer interface {
	Send(*Node) error
	grpc.ServerStream
}

type nodesManagerListNodesServer struct {
	grpc.ServerStream
}

func (x *nodesManagerListNodesServer) Send(m *Node) error {
	return x.ServerStream.SendMsg(m)
}

func _NodesManager_AddNode_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Node)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(NodesManagerServer).AddNode(m, &nodesManagerAddNodeServer{stream})
}

type NodesManager_AddNodeServer interface {
	Send(*Node) error
	grpc.ServerStream
}

type nodesManagerAddNodeServer struct {
	grpc.ServerStream
}

func (x *nodesManagerAddNodeServer) Send(m *Node) error {
	return x.ServerStream.SendMsg(m)
}

func _NodesManager_RemoveNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Node)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodesManagerServer).RemoveNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anndb_pb.NodesManager/RemoveNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodesManagerServer).RemoveNode(ctx, req.(*Node))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodesManager_LoadInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodesManagerServer).LoadInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anndb_pb.NodesManager/LoadInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodesManagerServer).LoadInfo(ctx, req.(*EmptyMessage))
	}
	return interceptor(ctx, in, info, handler)
}

var _NodesManager_serviceDesc = grpc.ServiceDesc{
	ServiceName: "anndb_pb.NodesManager",
	HandlerType: (*NodesManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RemoveNode",
			Handler:    _NodesManager_RemoveNode_Handler,
		},
		{
			MethodName: "LoadInfo",
			Handler:    _NodesManager_LoadInfo_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListNodes",
			Handler:       _NodesManager_ListNodes_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "AddNode",
			Handler:       _NodesManager_AddNode_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "cluster.proto",
}
