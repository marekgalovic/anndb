//+build !noasm !appengine
// AUTO-GENERATED BY C2GOASM -- DO NOT EDIT

TEXT ·_euclidean_distance_squared(SB), $0-32

    MOVQ len+0(FP), DI
    MOVQ a+8(FP), SI
    MOVQ b+16(FP), DX
    MOVQ result+24(FP), CX

    WORD $0x8548; BYTE $0xff     // test    rdi, rdi
	JE LBB0_1
    WORD $0xff48; BYTE $0xcf     // dec    rdi
    WORD $0x8949; BYTE $0xf9     // mov    r9, rdi
    LONG $0x03e9c149             // shr    r9, 3
    LONG $0x01418d45             // lea    r8d, [r9 + 1]
    LONG $0x03e08341             // and    r8d, 3
    LONG $0x18ff8348             // cmp    rdi, 24
	JAE LBB0_8
    LONG $0xc057f8c5             // vxorps    xmm0, xmm0, xmm0
    WORD $0xff31                 // xor    edi, edi
    WORD $0x854d; BYTE $0xc0     // test    r8, r8
	JNE LBB0_5
	JMP LBB0_7
LBB0_1:
    LONG $0xc057f8c5             // vxorps    xmm0, xmm0, xmm0
	JMP LBB0_7
LBB0_8:
    LONG $0xff408d49             // lea    rax, [r8 - 1]
    WORD $0x294c; BYTE $0xc8     // sub    rax, r9
    LONG $0xc057f8c5             // vxorps    xmm0, xmm0, xmm0
    WORD $0xff31                 // xor    edi, edi
LBB0_9:
    LONG $0x0c10fcc5; BYTE $0xbe // vmovups    ymm1, yword [rsi + 4*rdi]
    LONG $0x5410fcc5; WORD $0x20be // vmovups    ymm2, yword [rsi + 4*rdi + 32]
    LONG $0x5c10fcc5; WORD $0x40be // vmovups    ymm3, yword [rsi + 4*rdi + 64]
    LONG $0x6410fcc5; WORD $0x60be // vmovups    ymm4, yword [rsi + 4*rdi + 96]
    LONG $0x0c5cf4c5; BYTE $0xba // vsubps    ymm1, ymm1, yword [rdx + 4*rdi]
    LONG $0xc959f4c5             // vmulps    ymm1, ymm1, ymm1
    LONG $0xc158fcc5             // vaddps    ymm0, ymm0, ymm1
    LONG $0x4c5cecc5; WORD $0x20ba // vsubps    ymm1, ymm2, yword [rdx + 4*rdi + 32]
    LONG $0xc959f4c5             // vmulps    ymm1, ymm1, ymm1
    LONG $0xc158fcc5             // vaddps    ymm0, ymm0, ymm1
    LONG $0x4c5ce4c5; WORD $0x40ba // vsubps    ymm1, ymm3, yword [rdx + 4*rdi + 64]
    LONG $0xc959f4c5             // vmulps    ymm1, ymm1, ymm1
    LONG $0xc158fcc5             // vaddps    ymm0, ymm0, ymm1
    LONG $0x4c5cdcc5; WORD $0x60ba // vsubps    ymm1, ymm4, yword [rdx + 4*rdi + 96]
    LONG $0xc959f4c5             // vmulps    ymm1, ymm1, ymm1
    LONG $0xc158fcc5             // vaddps    ymm0, ymm0, ymm1
    LONG $0x20c78348             // add    rdi, 32
    LONG $0x04c08348             // add    rax, 4
	JNE LBB0_9
    WORD $0x854d; BYTE $0xc0     // test    r8, r8
	JE LBB0_7
LBB0_5:
    LONG $0x02e7c148             // shl    rdi, 2
    WORD $0xf749; BYTE $0xd8     // neg    r8
LBB0_6:
    LONG $0x0c10fcc5; BYTE $0x3e // vmovups    ymm1, yword [rsi + rdi]
    LONG $0x0c5cf4c5; BYTE $0x3a // vsubps    ymm1, ymm1, yword [rdx + rdi]
    LONG $0xc959f4c5             // vmulps    ymm1, ymm1, ymm1
    LONG $0xc158fcc5             // vaddps    ymm0, ymm0, ymm1
    LONG $0x20c78348             // add    rdi, 32
    WORD $0xff49; BYTE $0xc0     // inc    r8
	JNE LBB0_6
LBB0_7:
    LONG $0xc07cffc5             // vhaddps    ymm0, ymm0, ymm0
    LONG $0xc07cffc5             // vhaddps    ymm0, ymm0, ymm0
    LONG $0x197de3c4; WORD $0x01c1 // vextractf128    xmm1, ymm0, 1
    LONG $0xc158fac5             // vaddss    xmm0, xmm0, xmm1
    LONG $0x0111fac5             // vmovss    dword [rcx], xmm0
    VZEROUPPER
    RET




TEXT ·_manhattan_distance(SB), $0-32

    MOVQ len+0(FP), DI
    MOVQ a+8(FP), SI
    MOVQ b+16(FP), DX
    MOVQ result+24(FP), CX

    WORD $0x8548; BYTE $0xff     // test    rdi, rdi
	JE LBB1_1
    WORD $0xff48; BYTE $0xcf     // dec    rdi
    LONG $0x03efc148             // shr    rdi, 3
    LONG $0x01478d44             // lea    r8d, [rdi + 1]
    LONG $0x01e08341             // and    r8d, 1
    WORD $0x8548; BYTE $0xff     // test    rdi, rdi
	JE LBB1_3
    LONG $0xff408d49             // lea    rax, [r8 - 1]
    WORD $0x2948; BYTE $0xf8     // sub    rax, rdi
    LONG $0xc057f8c5             // vxorps    xmm0, xmm0, xmm0
    WORD $0xff31                 // xor    edi, edi
LBB1_8:
    LONG $0x0c10fcc5; BYTE $0xbe // vmovups    ymm1, yword [rsi + 4*rdi]
    LONG $0x0c5cf4c5; BYTE $0xba // vsubps    ymm1, ymm1, yword [rdx + 4*rdi]
    LONG $0xc959f4c5             // vmulps    ymm1, ymm1, ymm1
    LONG $0xc951fcc5             // vsqrtps    ymm1, ymm1
    LONG $0x5410fcc5; WORD $0x20be // vmovups    ymm2, yword [rsi + 4*rdi + 32]
    LONG $0x545cecc5; WORD $0x20ba // vsubps    ymm2, ymm2, yword [rdx + 4*rdi + 32]
    LONG $0xd259ecc5             // vmulps    ymm2, ymm2, ymm2
    LONG $0xd251fcc5             // vsqrtps    ymm2, ymm2
    LONG $0xc158fcc5             // vaddps    ymm0, ymm0, ymm1
    LONG $0xc258fcc5             // vaddps    ymm0, ymm0, ymm2
    LONG $0x10c78348             // add    rdi, 16
    LONG $0x02c08348             // add    rax, 2
	JNE LBB1_8
    WORD $0x854d; BYTE $0xc0     // test    r8, r8
	JNE LBB1_5
	JMP LBB1_6
LBB1_1:
    LONG $0xc057f8c5             // vxorps    xmm0, xmm0, xmm0
	JMP LBB1_6
LBB1_3:
    LONG $0xc057f8c5             // vxorps    xmm0, xmm0, xmm0
    WORD $0xff31                 // xor    edi, edi
    WORD $0x854d; BYTE $0xc0     // test    r8, r8
	JE LBB1_6
LBB1_5:
    LONG $0x0c10fcc5; BYTE $0xbe // vmovups    ymm1, yword [rsi + 4*rdi]
    LONG $0x0c5cf4c5; BYTE $0xba // vsubps    ymm1, ymm1, yword [rdx + 4*rdi]
    LONG $0xc959f4c5             // vmulps    ymm1, ymm1, ymm1
    LONG $0xc951fcc5             // vsqrtps    ymm1, ymm1
    LONG $0xc158fcc5             // vaddps    ymm0, ymm0, ymm1
LBB1_6:
    LONG $0xc07cffc5             // vhaddps    ymm0, ymm0, ymm0
    LONG $0xc07cffc5             // vhaddps    ymm0, ymm0, ymm0
    LONG $0x197de3c4; WORD $0x01c1 // vextractf128    xmm1, ymm0, 1
    LONG $0xc158fac5             // vaddss    xmm0, xmm0, xmm1
    LONG $0x0111fac5             // vmovss    dword [rcx], xmm0
    VZEROUPPER
    RET




TEXT ·_cosine_similarity_dot_norm(SB), $0-40

    MOVQ len+0(FP), DI
    MOVQ a+8(FP), SI
    MOVQ b+16(FP), DX
    MOVQ dot+24(FP), CX
    MOVQ norm_squared+32(FP), R8

    WORD $0x8548; BYTE $0xff     // test    rdi, rdi
	JE LBB2_1
    WORD $0xff48; BYTE $0xcf     // dec    rdi
    LONG $0x03efc148             // shr    rdi, 3
    LONG $0x014f8d44             // lea    r9d, [rdi + 1]
    LONG $0x01e18341             // and    r9d, 1
    WORD $0x8548; BYTE $0xff     // test    rdi, rdi
	JE LBB2_3
    LONG $0xff418d49             // lea    rax, [r9 - 1]
    WORD $0x2948; BYTE $0xf8     // sub    rax, rdi
    LONG $0xc057f8c5             // vxorps    xmm0, xmm0, xmm0
    WORD $0xff31                 // xor    edi, edi
    LONG $0xc957f0c5             // vxorps    xmm1, xmm1, xmm1
    LONG $0xd257e8c5             // vxorps    xmm2, xmm2, xmm2
LBB2_8:
    LONG $0x1c10fcc5; BYTE $0xbe // vmovups    ymm3, yword [rsi + 4*rdi]
    LONG $0x6410fcc5; WORD $0x20be // vmovups    ymm4, yword [rsi + 4*rdi + 32]
    LONG $0x2c10fcc5; BYTE $0xba // vmovups    ymm5, yword [rdx + 4*rdi]
    LONG $0x7410fcc5; WORD $0x20ba // vmovups    ymm6, yword [rdx + 4*rdi + 32]
    LONG $0xfd59e4c5             // vmulps    ymm7, ymm3, ymm5
    LONG $0xd758ecc5             // vaddps    ymm2, ymm2, ymm7
    LONG $0xdb59e4c5             // vmulps    ymm3, ymm3, ymm3
    LONG $0xcb58f4c5             // vaddps    ymm1, ymm1, ymm3
    LONG $0xdd59d4c5             // vmulps    ymm3, ymm5, ymm5
    LONG $0xc358fcc5             // vaddps    ymm0, ymm0, ymm3
    LONG $0xde59dcc5             // vmulps    ymm3, ymm4, ymm6
    LONG $0xd358ecc5             // vaddps    ymm2, ymm2, ymm3
    LONG $0xdc59dcc5             // vmulps    ymm3, ymm4, ymm4
    LONG $0xcb58f4c5             // vaddps    ymm1, ymm1, ymm3
    LONG $0xde59ccc5             // vmulps    ymm3, ymm6, ymm6
    LONG $0xc358fcc5             // vaddps    ymm0, ymm0, ymm3
    LONG $0x10c78348             // add    rdi, 16
    LONG $0x02c08348             // add    rax, 2
	JNE LBB2_8
    WORD $0x854d; BYTE $0xc9     // test    r9, r9
	JNE LBB2_5
	JMP LBB2_6
LBB2_1:
    LONG $0xd257e8c5             // vxorps    xmm2, xmm2, xmm2
    LONG $0xc957f0c5             // vxorps    xmm1, xmm1, xmm1
    LONG $0xc057f8c5             // vxorps    xmm0, xmm0, xmm0
	JMP LBB2_6
LBB2_3:
    LONG $0xc057f8c5             // vxorps    xmm0, xmm0, xmm0
    WORD $0xff31                 // xor    edi, edi
    LONG $0xc957f0c5             // vxorps    xmm1, xmm1, xmm1
    LONG $0xd257e8c5             // vxorps    xmm2, xmm2, xmm2
    WORD $0x854d; BYTE $0xc9     // test    r9, r9
	JE LBB2_6
LBB2_5:
    LONG $0x1c10fcc5; BYTE $0xbe // vmovups    ymm3, yword [rsi + 4*rdi]
    LONG $0x2410fcc5; BYTE $0xba // vmovups    ymm4, yword [rdx + 4*rdi]
    LONG $0xec59dcc5             // vmulps    ymm5, ymm4, ymm4
    LONG $0xc558fcc5             // vaddps    ymm0, ymm0, ymm5
    LONG $0xeb59e4c5             // vmulps    ymm5, ymm3, ymm3
    LONG $0xcd58f4c5             // vaddps    ymm1, ymm1, ymm5
    LONG $0xdc59e4c5             // vmulps    ymm3, ymm3, ymm4
    LONG $0xd358ecc5             // vaddps    ymm2, ymm2, ymm3
LBB2_6:
    LONG $0xd27cefc5             // vhaddps    ymm2, ymm2, ymm2
    LONG $0xd27cefc5             // vhaddps    ymm2, ymm2, ymm2
    LONG $0x197de3c4; WORD $0x01d3 // vextractf128    xmm3, ymm2, 1
    LONG $0xd358eac5             // vaddss    xmm2, xmm2, xmm3
    LONG $0xc97cf7c5             // vhaddps    ymm1, ymm1, ymm1
    LONG $0x1111fac5             // vmovss    dword [rcx], xmm2
    LONG $0xc97cf7c5             // vhaddps    ymm1, ymm1, ymm1
    LONG $0x197de3c4; WORD $0x01ca // vextractf128    xmm2, ymm1, 1
    LONG $0xc07cffc5             // vhaddps    ymm0, ymm0, ymm0
    LONG $0xca58f2c5             // vaddss    xmm1, xmm1, xmm2
    LONG $0xc07cffc5             // vhaddps    ymm0, ymm0, ymm0
    LONG $0x197de3c4; WORD $0x01c2 // vextractf128    xmm2, ymm0, 1
    LONG $0xc258fac5             // vaddss    xmm0, xmm0, xmm2
    LONG $0xc059f2c5             // vmulss    xmm0, xmm1, xmm0
    LONG $0x117ac1c4; BYTE $0x00 // vmovss    dword [r8], xmm0
    VZEROUPPER
    RET
