//+build !noasm !appengine
// AUTO-GENERATED BY C2GOASM -- DO NOT EDIT

TEXT ·_euclidean_distance_squared(SB), $0-32

    MOVQ len+0(FP), DI
    MOVQ a+8(FP), SI
    MOVQ b+16(FP), DX
    MOVQ result+24(FP), CX

    WORD $0x8949; BYTE $0xf8     // mov    r8, rdi
    LONG $0xf8e08349             // and    r8, -8
	JE LBB0_1
    LONG $0xff508d4d             // lea    r10, [r8 - 1]
    WORD $0x894c; BYTE $0xd0     // mov    rax, r10
    LONG $0x03e8c148             // shr    rax, 3
    LONG $0x01488d44             // lea    r9d, [rax + 1]
    LONG $0x03e18341             // and    r9d, 3
    LONG $0x18fa8349             // cmp    r10, 24
	JAE LBB0_12
    LONG $0xc057f8c5             // vxorps    xmm0, xmm0, xmm0
    WORD $0xc031                 // xor    eax, eax
    WORD $0x854d; BYTE $0xc9     // test    r9, r9
	JNE LBB0_5
	JMP LBB0_7
LBB0_1:
    LONG $0xc057f8c5             // vxorps    xmm0, xmm0, xmm0
	JMP LBB0_7
LBB0_12:
    LONG $0xff518d4d             // lea    r10, [r9 - 1]
    WORD $0x2949; BYTE $0xc2     // sub    r10, rax
    LONG $0xc057f8c5             // vxorps    xmm0, xmm0, xmm0
    WORD $0xc031                 // xor    eax, eax
LBB0_13:
    LONG $0x0c10fcc5; BYTE $0x86 // vmovups    ymm1, yword [rsi + 4*rax]
    LONG $0x5410fcc5; WORD $0x2086 // vmovups    ymm2, yword [rsi + 4*rax + 32]
    LONG $0x5c10fcc5; WORD $0x4086 // vmovups    ymm3, yword [rsi + 4*rax + 64]
    LONG $0x6410fcc5; WORD $0x6086 // vmovups    ymm4, yword [rsi + 4*rax + 96]
    LONG $0x0c5cf4c5; BYTE $0x82 // vsubps    ymm1, ymm1, yword [rdx + 4*rax]
    LONG $0xc959f4c5             // vmulps    ymm1, ymm1, ymm1
    LONG $0xc158fcc5             // vaddps    ymm0, ymm0, ymm1
    LONG $0x4c5cecc5; WORD $0x2082 // vsubps    ymm1, ymm2, yword [rdx + 4*rax + 32]
    LONG $0xc959f4c5             // vmulps    ymm1, ymm1, ymm1
    LONG $0xc158fcc5             // vaddps    ymm0, ymm0, ymm1
    LONG $0x4c5ce4c5; WORD $0x4082 // vsubps    ymm1, ymm3, yword [rdx + 4*rax + 64]
    LONG $0xc959f4c5             // vmulps    ymm1, ymm1, ymm1
    LONG $0xc158fcc5             // vaddps    ymm0, ymm0, ymm1
    LONG $0x4c5cdcc5; WORD $0x6082 // vsubps    ymm1, ymm4, yword [rdx + 4*rax + 96]
    LONG $0xc959f4c5             // vmulps    ymm1, ymm1, ymm1
    LONG $0xc158fcc5             // vaddps    ymm0, ymm0, ymm1
    LONG $0x20c08348             // add    rax, 32
    LONG $0x04c28349             // add    r10, 4
	JNE LBB0_13
    WORD $0x854d; BYTE $0xc9     // test    r9, r9
	JE LBB0_7
LBB0_5:
    LONG $0x02e0c148             // shl    rax, 2
    WORD $0xf749; BYTE $0xd9     // neg    r9
LBB0_6:
    LONG $0x0c10fcc5; BYTE $0x06 // vmovups    ymm1, yword [rsi + rax]
    LONG $0x0c5cf4c5; BYTE $0x02 // vsubps    ymm1, ymm1, yword [rdx + rax]
    LONG $0xc959f4c5             // vmulps    ymm1, ymm1, ymm1
    LONG $0xc158fcc5             // vaddps    ymm0, ymm0, ymm1
    LONG $0x20c08348             // add    rax, 32
    WORD $0xff49; BYTE $0xc1     // inc    r9
	JNE LBB0_6
LBB0_7:
    LONG $0xc07cffc5             // vhaddps    ymm0, ymm0, ymm0
    LONG $0xc07cffc5             // vhaddps    ymm0, ymm0, ymm0
    LONG $0x197de3c4; WORD $0x01c1 // vextractf128    xmm1, ymm0, 1
    LONG $0xc158fac5             // vaddss    xmm0, xmm0, xmm1
    LONG $0x0111fac5             // vmovss    dword [rcx], xmm0
    WORD $0x6349; BYTE $0xc0     // movsxd    rax, r8d
    WORD $0x3948; BYTE $0xf8     // cmp    rax, rdi
	JAE LBB0_11
    WORD $0x6349; BYTE $0xc0     // movsxd    rax, r8d
    WORD $0x634c; BYTE $0xc7     // movsxd    r8, edi
    WORD $0xf749; BYTE $0xd0     // not    r8
    LONG $0x07c88349             // or    r8, 7
    LONG $0x01c7f640             // test    dil, 1
	JE LBB0_10
    LONG $0x0c10fac5; BYTE $0x86 // vmovss    xmm1, dword [rsi + 4*rax]
    LONG $0x0c5cf2c5; BYTE $0x82 // vsubss    xmm1, xmm1, dword [rdx + 4*rax]
    LONG $0xc959f2c5             // vmulss    xmm1, xmm1, xmm1
    LONG $0xc158fac5             // vaddss    xmm0, xmm0, xmm1
    LONG $0x0111fac5             // vmovss    dword [rcx], xmm0
    LONG $0x01c88348             // or    rax, 1
LBB0_10:
    WORD $0x0149; BYTE $0xf8     // add    r8, rdi
	JE LBB0_11
LBB0_14:
    LONG $0x0c10fac5; BYTE $0x86 // vmovss    xmm1, dword [rsi + 4*rax]
    LONG $0x0c5cf2c5; BYTE $0x82 // vsubss    xmm1, xmm1, dword [rdx + 4*rax]
    LONG $0xc959f2c5             // vmulss    xmm1, xmm1, xmm1
    LONG $0xc158fac5             // vaddss    xmm0, xmm0, xmm1
    LONG $0x0111fac5             // vmovss    dword [rcx], xmm0
    LONG $0x4c10fac5; WORD $0x0486 // vmovss    xmm1, dword [rsi + 4*rax + 4]
    LONG $0x4c5cf2c5; WORD $0x0482 // vsubss    xmm1, xmm1, dword [rdx + 4*rax + 4]
    LONG $0xc959f2c5             // vmulss    xmm1, xmm1, xmm1
    LONG $0xc158fac5             // vaddss    xmm0, xmm0, xmm1
    LONG $0x0111fac5             // vmovss    dword [rcx], xmm0
    LONG $0x02c08348             // add    rax, 2
    WORD $0x3948; BYTE $0xc7     // cmp    rdi, rax
	JNE LBB0_14
LBB0_11:
    VZEROUPPER
    RET




DATA LCDATA1<>+0x000(SB)/8, $0x8000000080000000
DATA LCDATA1<>+0x008(SB)/8, $0x8000000080000000
GLOBL LCDATA1<>(SB), 8, $16

TEXT ·_manhattan_distance(SB), $0-32

    MOVQ len+0(FP), DI
    MOVQ a+8(FP), SI
    MOVQ b+16(FP), DX
    MOVQ result+24(FP), CX
    LEAQ LCDATA1<>(SB), BP

    WORD $0x8949; BYTE $0xf9     // mov    r9, rdi
    LONG $0xf8e18349             // and    r9, -8
	JE LBB1_1
    LONG $0xff418d49             // lea    rax, [r9 - 1]
    LONG $0x03e8c148             // shr    rax, 3
    LONG $0x01408d44             // lea    r8d, [rax + 1]
    LONG $0x01e08341             // and    r8d, 1
    WORD $0x8548; BYTE $0xc0     // test    rax, rax
	JE LBB1_3
    LONG $0xff508d4d             // lea    r10, [r8 - 1]
    WORD $0x2949; BYTE $0xc2     // sub    r10, rax
    LONG $0xc057f8c5             // vxorps    xmm0, xmm0, xmm0
    WORD $0xc031                 // xor    eax, eax
LBB1_14:
    LONG $0x0c10fcc5; BYTE $0x86 // vmovups    ymm1, yword [rsi + 4*rax]
    LONG $0x0c5cf4c5; BYTE $0x82 // vsubps    ymm1, ymm1, yword [rdx + 4*rax]
    LONG $0xc959f4c5             // vmulps    ymm1, ymm1, ymm1
    LONG $0xc951fcc5             // vsqrtps    ymm1, ymm1
    LONG $0x5410fcc5; WORD $0x2086 // vmovups    ymm2, yword [rsi + 4*rax + 32]
    LONG $0x545cecc5; WORD $0x2082 // vsubps    ymm2, ymm2, yword [rdx + 4*rax + 32]
    LONG $0xd259ecc5             // vmulps    ymm2, ymm2, ymm2
    LONG $0xd251fcc5             // vsqrtps    ymm2, ymm2
    LONG $0xc158fcc5             // vaddps    ymm0, ymm0, ymm1
    LONG $0xc258fcc5             // vaddps    ymm0, ymm0, ymm2
    LONG $0x10c08348             // add    rax, 16
    LONG $0x02c28349             // add    r10, 2
	JNE LBB1_14
    WORD $0x854d; BYTE $0xc0     // test    r8, r8
	JNE LBB1_5
	JMP LBB1_6
LBB1_1:
    LONG $0xc057f8c5             // vxorps    xmm0, xmm0, xmm0
	JMP LBB1_6
LBB1_3:
    LONG $0xc057f8c5             // vxorps    xmm0, xmm0, xmm0
    WORD $0xc031                 // xor    eax, eax
    WORD $0x854d; BYTE $0xc0     // test    r8, r8
	JE LBB1_6
LBB1_5:
    LONG $0x0c10fcc5; BYTE $0x86 // vmovups    ymm1, yword [rsi + 4*rax]
    LONG $0x0c5cf4c5; BYTE $0x82 // vsubps    ymm1, ymm1, yword [rdx + 4*rax]
    LONG $0xc959f4c5             // vmulps    ymm1, ymm1, ymm1
    LONG $0xc951fcc5             // vsqrtps    ymm1, ymm1
    LONG $0xc158fcc5             // vaddps    ymm0, ymm0, ymm1
LBB1_6:
    LONG $0xc07cffc5             // vhaddps    ymm0, ymm0, ymm0
    LONG $0xc07cffc5             // vhaddps    ymm0, ymm0, ymm0
    LONG $0x197de3c4; WORD $0x01c1 // vextractf128    xmm1, ymm0, 1
    LONG $0xc158fac5             // vaddss    xmm0, xmm0, xmm1
    LONG $0x0111fac5             // vmovss    dword [rcx], xmm0
    WORD $0x6349; BYTE $0xc1     // movsxd    rax, r9d
    WORD $0x3948; BYTE $0xf8     // cmp    rax, rdi
	JAE LBB1_12
    WORD $0x6349; BYTE $0xc1     // movsxd    rax, r9d
    WORD $0x634c; BYTE $0xc7     // movsxd    r8, edi
    WORD $0xf749; BYTE $0xd0     // not    r8
    LONG $0x07c88349             // or    r8, 7
    LONG $0x01c7f640             // test    dil, 1
	JE LBB1_9
    LONG $0x0c10fac5; BYTE $0x86 // vmovss    xmm1, dword [rsi + 4*rax]
    LONG $0x0c5cf2c5; BYTE $0x82 // vsubss    xmm1, xmm1, dword [rdx + 4*rax]
    LONG $0x5557f0c5; BYTE $0x00 // vxorps    xmm2, xmm1, oword 0[rbp] /* [rip + LCPI1_0] */
    LONG $0xdb57e0c5             // vxorps    xmm3, xmm3, xmm3
    LONG $0xdbc2f2c5; BYTE $0x01 // vcmpltss    xmm3, xmm1, xmm3
    LONG $0x4a71e3c4; WORD $0x30ca // vblendvps    xmm1, xmm1, xmm2, xmm3
    LONG $0xc158fac5             // vaddss    xmm0, xmm0, xmm1
    LONG $0x0111fac5             // vmovss    dword [rcx], xmm0
    LONG $0x01c88348             // or    rax, 1
LBB1_9:
    WORD $0x0149; BYTE $0xf8     // add    r8, rdi
	JE LBB1_12
    LONG $0x4d28f8c5; BYTE $0x00 // vmovaps    xmm1, oword 0[rbp] /* [rip + LCPI1_0] */
    LONG $0xd257e8c5             // vxorps    xmm2, xmm2, xmm2
LBB1_11:
    LONG $0x1c10fac5; BYTE $0x86 // vmovss    xmm3, dword [rsi + 4*rax]
    LONG $0x1c5ce2c5; BYTE $0x82 // vsubss    xmm3, xmm3, dword [rdx + 4*rax]
    LONG $0xe157e0c5             // vxorps    xmm4, xmm3, xmm1
    LONG $0xeac2e2c5; BYTE $0x01 // vcmpltss    xmm5, xmm3, xmm2
    LONG $0x4a61e3c4; WORD $0x50dc // vblendvps    xmm3, xmm3, xmm4, xmm5
    LONG $0xc358fac5             // vaddss    xmm0, xmm0, xmm3
    LONG $0x0111fac5             // vmovss    dword [rcx], xmm0
    LONG $0x5c10fac5; WORD $0x0486 // vmovss    xmm3, dword [rsi + 4*rax + 4]
    LONG $0x5c5ce2c5; WORD $0x0482 // vsubss    xmm3, xmm3, dword [rdx + 4*rax + 4]
    LONG $0xe157e0c5             // vxorps    xmm4, xmm3, xmm1
    LONG $0xeac2e2c5; BYTE $0x01 // vcmpltss    xmm5, xmm3, xmm2
    LONG $0x4a61e3c4; WORD $0x50dc // vblendvps    xmm3, xmm3, xmm4, xmm5
    LONG $0xc358fac5             // vaddss    xmm0, xmm0, xmm3
    LONG $0x0111fac5             // vmovss    dword [rcx], xmm0
    LONG $0x02c08348             // add    rax, 2
    WORD $0x3948; BYTE $0xc7     // cmp    rdi, rax
	JNE LBB1_11
LBB1_12:
    VZEROUPPER
    RET




TEXT ·_cosine_similarity_dot_norm(SB), $0-40

    MOVQ len+0(FP), DI
    MOVQ a+8(FP), SI
    MOVQ b+16(FP), DX
    MOVQ dot+24(FP), CX
    MOVQ norm_squared+32(FP), R8

    WORD $0x8949; BYTE $0xfa     // mov    r10, rdi
    LONG $0xf8e28349             // and    r10, -8
	JE LBB2_1
    LONG $0xff428d49             // lea    rax, [r10 - 1]
    LONG $0x03e8c148             // shr    rax, 3
    LONG $0x01488d44             // lea    r9d, [rax + 1]
    LONG $0x01e18341             // and    r9d, 1
    WORD $0x8548; BYTE $0xc0     // test    rax, rax
	JE LBB2_3
    LONG $0xff598d4d             // lea    r11, [r9 - 1]
    WORD $0x2949; BYTE $0xc3     // sub    r11, rax
    LONG $0xc057f8c5             // vxorps    xmm0, xmm0, xmm0
    WORD $0xc031                 // xor    eax, eax
    LONG $0xd257e8c5             // vxorps    xmm2, xmm2, xmm2
    LONG $0xc957f0c5             // vxorps    xmm1, xmm1, xmm1
LBB2_12:
    LONG $0x1c10fcc5; BYTE $0x86 // vmovups    ymm3, yword [rsi + 4*rax]
    LONG $0x6410fcc5; WORD $0x2086 // vmovups    ymm4, yword [rsi + 4*rax + 32]
    LONG $0x2c10fcc5; BYTE $0x82 // vmovups    ymm5, yword [rdx + 4*rax]
    LONG $0x7410fcc5; WORD $0x2082 // vmovups    ymm6, yword [rdx + 4*rax + 32]
    LONG $0xfd59e4c5             // vmulps    ymm7, ymm3, ymm5
    LONG $0xcf58f4c5             // vaddps    ymm1, ymm1, ymm7
    LONG $0xdb59e4c5             // vmulps    ymm3, ymm3, ymm3
    LONG $0xd358ecc5             // vaddps    ymm2, ymm2, ymm3
    LONG $0xdd59d4c5             // vmulps    ymm3, ymm5, ymm5
    LONG $0xc358fcc5             // vaddps    ymm0, ymm0, ymm3
    LONG $0xde59dcc5             // vmulps    ymm3, ymm4, ymm6
    LONG $0xcb58f4c5             // vaddps    ymm1, ymm1, ymm3
    LONG $0xdc59dcc5             // vmulps    ymm3, ymm4, ymm4
    LONG $0xd358ecc5             // vaddps    ymm2, ymm2, ymm3
    LONG $0xde59ccc5             // vmulps    ymm3, ymm6, ymm6
    LONG $0xc358fcc5             // vaddps    ymm0, ymm0, ymm3
    LONG $0x10c08348             // add    rax, 16
    LONG $0x02c38349             // add    r11, 2
	JNE LBB2_12
    WORD $0x854d; BYTE $0xc9     // test    r9, r9
	JNE LBB2_5
	JMP LBB2_6
LBB2_1:
    LONG $0xc957f0c5             // vxorps    xmm1, xmm1, xmm1
    LONG $0xd257e8c5             // vxorps    xmm2, xmm2, xmm2
    LONG $0xc057f8c5             // vxorps    xmm0, xmm0, xmm0
	JMP LBB2_6
LBB2_3:
    LONG $0xc057f8c5             // vxorps    xmm0, xmm0, xmm0
    WORD $0xc031                 // xor    eax, eax
    LONG $0xd257e8c5             // vxorps    xmm2, xmm2, xmm2
    LONG $0xc957f0c5             // vxorps    xmm1, xmm1, xmm1
    WORD $0x854d; BYTE $0xc9     // test    r9, r9
	JE LBB2_6
LBB2_5:
    LONG $0x1c10fcc5; BYTE $0x86 // vmovups    ymm3, yword [rsi + 4*rax]
    LONG $0x2410fcc5; BYTE $0x82 // vmovups    ymm4, yword [rdx + 4*rax]
    LONG $0xec59dcc5             // vmulps    ymm5, ymm4, ymm4
    LONG $0xc558fcc5             // vaddps    ymm0, ymm0, ymm5
    LONG $0xeb59e4c5             // vmulps    ymm5, ymm3, ymm3
    LONG $0xd558ecc5             // vaddps    ymm2, ymm2, ymm5
    LONG $0xdc59e4c5             // vmulps    ymm3, ymm3, ymm4
    LONG $0xcb58f4c5             // vaddps    ymm1, ymm1, ymm3
LBB2_6:
    LONG $0xc97cf7c5             // vhaddps    ymm1, ymm1, ymm1
    LONG $0xc97cf7c5             // vhaddps    ymm1, ymm1, ymm1
    LONG $0x197de3c4; WORD $0x01cb // vextractf128    xmm3, ymm1, 1
    LONG $0xcb58f2c5             // vaddss    xmm1, xmm1, xmm3
    LONG $0xd27cefc5             // vhaddps    ymm2, ymm2, ymm2
    LONG $0x0911fac5             // vmovss    dword [rcx], xmm1
    LONG $0xd27cefc5             // vhaddps    ymm2, ymm2, ymm2
    LONG $0x197de3c4; WORD $0x01d3 // vextractf128    xmm3, ymm2, 1
    LONG $0xe07cffc5             // vhaddps    ymm4, ymm0, ymm0
    LONG $0xc358eac5             // vaddss    xmm0, xmm2, xmm3
    LONG $0xd47cdfc5             // vhaddps    ymm2, ymm4, ymm4
    LONG $0x197de3c4; WORD $0x01d3 // vextractf128    xmm3, ymm2, 1
    LONG $0xd358eac5             // vaddss    xmm2, xmm2, xmm3
    WORD $0x6349; BYTE $0xc2     // movsxd    rax, r10d
    WORD $0x3948; BYTE $0xf8     // cmp    rax, rdi
	JAE LBB2_10
    WORD $0x6349; BYTE $0xc2     // movsxd    rax, r10d
    WORD $0x634c; BYTE $0xcf     // movsxd    r9, edi
    WORD $0xf749; BYTE $0xd1     // not    r9
    LONG $0x07c98349             // or    r9, 7
    LONG $0x01c7f640             // test    dil, 1
	JE LBB2_9
    LONG $0x1c10fac5; BYTE $0x86 // vmovss    xmm3, dword [rsi + 4*rax]
    LONG $0x1c59e2c5; BYTE $0x82 // vmulss    xmm3, xmm3, dword [rdx + 4*rax]
    LONG $0xcb58f2c5             // vaddss    xmm1, xmm1, xmm3
    LONG $0x0911fac5             // vmovss    dword [rcx], xmm1
    LONG $0x1c10fac5; BYTE $0x86 // vmovss    xmm3, dword [rsi + 4*rax]
    LONG $0xdb59e2c5             // vmulss    xmm3, xmm3, xmm3
    LONG $0xc358fac5             // vaddss    xmm0, xmm0, xmm3
    LONG $0x1c10fac5; BYTE $0x82 // vmovss    xmm3, dword [rdx + 4*rax]
    LONG $0xdb59e2c5             // vmulss    xmm3, xmm3, xmm3
    LONG $0xd358eac5             // vaddss    xmm2, xmm2, xmm3
    LONG $0x01c88348             // or    rax, 1
LBB2_9:
    WORD $0x0149; BYTE $0xf9     // add    r9, rdi
	JE LBB2_10
LBB2_13:
    LONG $0x1c10fac5; BYTE $0x86 // vmovss    xmm3, dword [rsi + 4*rax]
    LONG $0x1c59e2c5; BYTE $0x82 // vmulss    xmm3, xmm3, dword [rdx + 4*rax]
    LONG $0xcb58f2c5             // vaddss    xmm1, xmm1, xmm3
    LONG $0x0911fac5             // vmovss    dword [rcx], xmm1
    LONG $0x1c10fac5; BYTE $0x86 // vmovss    xmm3, dword [rsi + 4*rax]
    LONG $0x6410fac5; WORD $0x0486 // vmovss    xmm4, dword [rsi + 4*rax + 4]
    LONG $0xdb59e2c5             // vmulss    xmm3, xmm3, xmm3
    LONG $0xc358fac5             // vaddss    xmm0, xmm0, xmm3
    LONG $0x1c10fac5; BYTE $0x82 // vmovss    xmm3, dword [rdx + 4*rax]
    LONG $0xdb59e2c5             // vmulss    xmm3, xmm3, xmm3
    LONG $0xd358eac5             // vaddss    xmm2, xmm2, xmm3
    LONG $0x5c59dac5; WORD $0x0482 // vmulss    xmm3, xmm4, dword [rdx + 4*rax + 4]
    LONG $0xcb58f2c5             // vaddss    xmm1, xmm1, xmm3
    LONG $0x0911fac5             // vmovss    dword [rcx], xmm1
    LONG $0x5c10fac5; WORD $0x0486 // vmovss    xmm3, dword [rsi + 4*rax + 4]
    LONG $0xdb59e2c5             // vmulss    xmm3, xmm3, xmm3
    LONG $0xc358fac5             // vaddss    xmm0, xmm0, xmm3
    LONG $0x5c10fac5; WORD $0x0482 // vmovss    xmm3, dword [rdx + 4*rax + 4]
    LONG $0xdb59e2c5             // vmulss    xmm3, xmm3, xmm3
    LONG $0xd358eac5             // vaddss    xmm2, xmm2, xmm3
    LONG $0x02c08348             // add    rax, 2
    WORD $0x3948; BYTE $0xc7     // cmp    rdi, rax
	JNE LBB2_13
LBB2_10:
    LONG $0xc259fac5             // vmulss    xmm0, xmm0, xmm2
    LONG $0x117ac1c4; BYTE $0x00 // vmovss    dword [r8], xmm0
    VZEROUPPER
    RET
