// Code generated by protoc-gen-go. DO NOT EDIT.
// source: cluster.proto

package anndb_pb

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Node struct {
	Id                   []byte   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Address              string   `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	Port                 uint32   `protobuf:"varint,3,opt,name=port,proto3" json:"port,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Node) Reset()         { *m = Node{} }
func (m *Node) String() string { return proto.CompactTextString(m) }
func (*Node) ProtoMessage()    {}
func (*Node) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cfb3b8ec240c376, []int{0}
}

func (m *Node) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Node.Unmarshal(m, b)
}
func (m *Node) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Node.Marshal(b, m, deterministic)
}
func (m *Node) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Node.Merge(m, src)
}
func (m *Node) XXX_Size() int {
	return xxx_messageInfo_Node.Size(m)
}
func (m *Node) XXX_DiscardUnknown() {
	xxx_messageInfo_Node.DiscardUnknown(m)
}

var xxx_messageInfo_Node proto.InternalMessageInfo

func (m *Node) GetId() []byte {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *Node) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *Node) GetPort() uint32 {
	if m != nil {
		return m.Port
	}
	return 0
}

func init() {
	proto.RegisterType((*Node)(nil), "anndb_pb.Node")
}

func init() {
	proto.RegisterFile("cluster.proto", fileDescriptor_3cfb3b8ec240c376)
}

var fileDescriptor_3cfb3b8ec240c376 = []byte{
	// 202 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x4d, 0xce, 0x29, 0x2d,
	0x2e, 0x49, 0x2d, 0xd2, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x48, 0xcc, 0xcb, 0x4b, 0x49,
	0x8a, 0x2f, 0x48, 0x92, 0xe2, 0x4a, 0xce, 0x2f, 0x4a, 0x85, 0x88, 0x2a, 0xb9, 0x70, 0xb1, 0xf8,
	0xe5, 0xa7, 0xa4, 0x0a, 0xf1, 0x71, 0x31, 0x65, 0xa6, 0x48, 0x30, 0x2a, 0x30, 0x6a, 0xf0, 0x04,
	0x31, 0x65, 0xa6, 0x08, 0x49, 0x70, 0xb1, 0x27, 0xa6, 0xa4, 0x14, 0xa5, 0x16, 0x17, 0x4b, 0x30,
	0x29, 0x30, 0x6a, 0x70, 0x06, 0xc1, 0xb8, 0x42, 0x42, 0x5c, 0x2c, 0x05, 0xf9, 0x45, 0x25, 0x12,
	0xcc, 0x0a, 0x8c, 0x1a, 0xbc, 0x41, 0x60, 0xb6, 0xd1, 0x06, 0x46, 0x2e, 0x3e, 0x67, 0x88, 0x6d,
	0xbe, 0x89, 0x79, 0x89, 0xe9, 0xa9, 0x45, 0x42, 0xa6, 0x5c, 0x9c, 0x3e, 0x99, 0xc5, 0x25, 0x20,
	0xc3, 0x8b, 0x85, 0xc4, 0xf4, 0x60, 0x96, 0xeb, 0xb9, 0xe6, 0x16, 0x94, 0x54, 0xfa, 0xa6, 0x16,
	0x17, 0x27, 0xa6, 0xa7, 0x4a, 0xf1, 0x21, 0xc4, 0x41, 0x0a, 0x0d, 0x18, 0x85, 0x0c, 0xb9, 0xd8,
	0x1d, 0x53, 0x52, 0x20, 0x4e, 0x42, 0x95, 0x94, 0xc2, 0x61, 0x88, 0x90, 0x09, 0x17, 0x57, 0x50,
	0x6a, 0x6e, 0x7e, 0x59, 0x2a, 0x29, 0xba, 0x92, 0xd8, 0xc0, 0xfe, 0x37, 0x06, 0x04, 0x00, 0x00,
	0xff, 0xff, 0x17, 0xdd, 0xb0, 0x42, 0x26, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ClusterManagerClient is the client API for ClusterManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ClusterManagerClient interface {
	ListNodes(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (ClusterManager_ListNodesClient, error)
	AddNode(ctx context.Context, in *Node, opts ...grpc.CallOption) (*EmptyMessage, error)
	RemoveNode(ctx context.Context, in *Node, opts ...grpc.CallOption) (*EmptyMessage, error)
}

type clusterManagerClient struct {
	cc grpc.ClientConnInterface
}

func NewClusterManagerClient(cc grpc.ClientConnInterface) ClusterManagerClient {
	return &clusterManagerClient{cc}
}

func (c *clusterManagerClient) ListNodes(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (ClusterManager_ListNodesClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ClusterManager_serviceDesc.Streams[0], "/anndb_pb.ClusterManager/ListNodes", opts...)
	if err != nil {
		return nil, err
	}
	x := &clusterManagerListNodesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ClusterManager_ListNodesClient interface {
	Recv() (*Node, error)
	grpc.ClientStream
}

type clusterManagerListNodesClient struct {
	grpc.ClientStream
}

func (x *clusterManagerListNodesClient) Recv() (*Node, error) {
	m := new(Node)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *clusterManagerClient) AddNode(ctx context.Context, in *Node, opts ...grpc.CallOption) (*EmptyMessage, error) {
	out := new(EmptyMessage)
	err := c.cc.Invoke(ctx, "/anndb_pb.ClusterManager/AddNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerClient) RemoveNode(ctx context.Context, in *Node, opts ...grpc.CallOption) (*EmptyMessage, error) {
	out := new(EmptyMessage)
	err := c.cc.Invoke(ctx, "/anndb_pb.ClusterManager/RemoveNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ClusterManagerServer is the server API for ClusterManager service.
type ClusterManagerServer interface {
	ListNodes(*EmptyMessage, ClusterManager_ListNodesServer) error
	AddNode(context.Context, *Node) (*EmptyMessage, error)
	RemoveNode(context.Context, *Node) (*EmptyMessage, error)
}

// UnimplementedClusterManagerServer can be embedded to have forward compatible implementations.
type UnimplementedClusterManagerServer struct {
}

func (*UnimplementedClusterManagerServer) ListNodes(req *EmptyMessage, srv ClusterManager_ListNodesServer) error {
	return status.Errorf(codes.Unimplemented, "method ListNodes not implemented")
}
func (*UnimplementedClusterManagerServer) AddNode(ctx context.Context, req *Node) (*EmptyMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddNode not implemented")
}
func (*UnimplementedClusterManagerServer) RemoveNode(ctx context.Context, req *Node) (*EmptyMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveNode not implemented")
}

func RegisterClusterManagerServer(s *grpc.Server, srv ClusterManagerServer) {
	s.RegisterService(&_ClusterManager_serviceDesc, srv)
}

func _ClusterManager_ListNodes_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(EmptyMessage)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ClusterManagerServer).ListNodes(m, &clusterManagerListNodesServer{stream})
}

type ClusterManager_ListNodesServer interface {
	Send(*Node) error
	grpc.ServerStream
}

type clusterManagerListNodesServer struct {
	grpc.ServerStream
}

func (x *clusterManagerListNodesServer) Send(m *Node) error {
	return x.ServerStream.SendMsg(m)
}

func _ClusterManager_AddNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Node)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagerServer).AddNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anndb_pb.ClusterManager/AddNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagerServer).AddNode(ctx, req.(*Node))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterManager_RemoveNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Node)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagerServer).RemoveNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anndb_pb.ClusterManager/RemoveNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagerServer).RemoveNode(ctx, req.(*Node))
	}
	return interceptor(ctx, in, info, handler)
}

var _ClusterManager_serviceDesc = grpc.ServiceDesc{
	ServiceName: "anndb_pb.ClusterManager",
	HandlerType: (*ClusterManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddNode",
			Handler:    _ClusterManager_AddNode_Handler,
		},
		{
			MethodName: "RemoveNode",
			Handler:    _ClusterManager_RemoveNode_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListNodes",
			Handler:       _ClusterManager_ListNodes_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "cluster.proto",
}
