// Code generated by protoc-gen-go. DO NOT EDIT.
// source: raft.proto

package anndb_pb

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type RaftMessage struct {
	GroupId              []byte   `protobuf:"bytes,1,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	Messages             [][]byte `protobuf:"bytes,2,rep,name=messages,proto3" json:"messages,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RaftMessage) Reset()         { *m = RaftMessage{} }
func (m *RaftMessage) String() string { return proto.CompactTextString(m) }
func (*RaftMessage) ProtoMessage()    {}
func (*RaftMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_b042552c306ae59b, []int{0}
}

func (m *RaftMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RaftMessage.Unmarshal(m, b)
}
func (m *RaftMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RaftMessage.Marshal(b, m, deterministic)
}
func (m *RaftMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RaftMessage.Merge(m, src)
}
func (m *RaftMessage) XXX_Size() int {
	return xxx_messageInfo_RaftMessage.Size(m)
}
func (m *RaftMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_RaftMessage.DiscardUnknown(m)
}

var xxx_messageInfo_RaftMessage proto.InternalMessageInfo

func (m *RaftMessage) GetGroupId() []byte {
	if m != nil {
		return m.GroupId
	}
	return nil
}

func (m *RaftMessage) GetMessages() [][]byte {
	if m != nil {
		return m.Messages
	}
	return nil
}

func init() {
	proto.RegisterType((*RaftMessage)(nil), "anndb_pb.RaftMessage")
}

func init() {
	proto.RegisterFile("raft.proto", fileDescriptor_b042552c306ae59b)
}

var fileDescriptor_b042552c306ae59b = []byte{
	// 160 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2a, 0x4a, 0x4c, 0x2b,
	0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x48, 0xcc, 0xcb, 0x4b, 0x49, 0x8a, 0x2f, 0x48,
	0x92, 0xe2, 0x4a, 0xce, 0x2f, 0x4a, 0x85, 0x88, 0x2a, 0xb9, 0x70, 0x71, 0x07, 0x25, 0xa6, 0x95,
	0xf8, 0xa6, 0x16, 0x17, 0x27, 0xa6, 0xa7, 0x0a, 0x49, 0x72, 0x71, 0xa4, 0x17, 0xe5, 0x97, 0x16,
	0xc4, 0x67, 0xa6, 0x48, 0x30, 0x2a, 0x30, 0x6a, 0xf0, 0x04, 0xb1, 0x83, 0xf9, 0x9e, 0x29, 0x42,
	0x52, 0x5c, 0x1c, 0xb9, 0x10, 0x55, 0xc5, 0x12, 0x4c, 0x0a, 0xcc, 0x1a, 0x3c, 0x41, 0x70, 0xbe,
	0x91, 0x27, 0x17, 0x2f, 0xc8, 0x94, 0x90, 0xa2, 0xc4, 0xbc, 0xe2, 0x82, 0xfc, 0xa2, 0x12, 0x21,
	0x0b, 0x2e, 0xf6, 0xa0, 0xd4, 0xe4, 0xd4, 0xcc, 0xb2, 0x54, 0x21, 0x51, 0x3d, 0x98, 0xc5, 0x7a,
	0x48, 0x36, 0x49, 0x89, 0x21, 0x84, 0x5d, 0x73, 0x0b, 0x4a, 0x2a, 0xa1, 0xe2, 0x49, 0x6c, 0x60,
	0x77, 0x19, 0x03, 0x02, 0x00, 0x00, 0xff, 0xff, 0x80, 0xbf, 0x6a, 0x6c, 0xbb, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// RaftTransportClient is the client API for RaftTransport service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RaftTransportClient interface {
	Receive(ctx context.Context, in *RaftMessage, opts ...grpc.CallOption) (*EmptyMessage, error)
}

type raftTransportClient struct {
	cc grpc.ClientConnInterface
}

func NewRaftTransportClient(cc grpc.ClientConnInterface) RaftTransportClient {
	return &raftTransportClient{cc}
}

func (c *raftTransportClient) Receive(ctx context.Context, in *RaftMessage, opts ...grpc.CallOption) (*EmptyMessage, error) {
	out := new(EmptyMessage)
	err := c.cc.Invoke(ctx, "/anndb_pb.RaftTransport/Receive", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RaftTransportServer is the server API for RaftTransport service.
type RaftTransportServer interface {
	Receive(context.Context, *RaftMessage) (*EmptyMessage, error)
}

// UnimplementedRaftTransportServer can be embedded to have forward compatible implementations.
type UnimplementedRaftTransportServer struct {
}

func (*UnimplementedRaftTransportServer) Receive(ctx context.Context, req *RaftMessage) (*EmptyMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Receive not implemented")
}

func RegisterRaftTransportServer(s *grpc.Server, srv RaftTransportServer) {
	s.RegisterService(&_RaftTransport_serviceDesc, srv)
}

func _RaftTransport_Receive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RaftMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RaftTransportServer).Receive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anndb_pb.RaftTransport/Receive",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RaftTransportServer).Receive(ctx, req.(*RaftMessage))
	}
	return interceptor(ctx, in, info, handler)
}

var _RaftTransport_serviceDesc = grpc.ServiceDesc{
	ServiceName: "anndb_pb.RaftTransport",
	HandlerType: (*RaftTransportServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Receive",
			Handler:    _RaftTransport_Receive_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "raft.proto",
}
