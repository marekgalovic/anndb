//+build !noasm !appengine
// AUTO-GENERATED BY C2GOASM -- DO NOT EDIT

TEXT ·_euclidean_distance_squared(SB), $0-32

    MOVQ len+0(FP), DI
    MOVQ a+8(FP), SI
    MOVQ b+16(FP), DX
    MOVQ result+24(FP), CX

    WORD $0x8548; BYTE $0xff     // test    rdi, rdi
	JE LBB0_1
    WORD $0xff48; BYTE $0xcf     // dec    rdi
    WORD $0x8949; BYTE $0xf9     // mov    r9, rdi
    LONG $0x03e9c149             // shr    r9, 3
    LONG $0x01418d45             // lea    r8d, [r9 + 1]
    LONG $0x03e08341             // and    r8d, 3
    LONG $0x18ff8348             // cmp    rdi, 24
	JAE LBB0_8
    WORD $0x570f; BYTE $0xc0     // xorps    xmm0, xmm0
    WORD $0xff31                 // xor    edi, edi
    WORD $0x854d; BYTE $0xc0     // test    r8, r8
	JNE LBB0_5
	JMP LBB0_7
LBB0_1:
    WORD $0x570f; BYTE $0xc0     // xorps    xmm0, xmm0
	JMP LBB0_7
LBB0_8:
    LONG $0xff408d49             // lea    rax, [r8 - 1]
    WORD $0x294c; BYTE $0xc8     // sub    rax, r9
    WORD $0x570f; BYTE $0xc9     // xorps    xmm1, xmm1
    WORD $0xff31                 // xor    edi, edi
LBB0_9:
    LONG $0xbe14280f             // movaps    xmm2, oword [rsi + 4*rdi]
    LONG $0xbe5c280f; BYTE $0x20 // movaps    xmm3, oword [rsi + 4*rdi + 32]
    LONG $0xbe64280f; BYTE $0x40 // movaps    xmm4, oword [rsi + 4*rdi + 64]
    LONG $0xbe44280f; BYTE $0x60 // movaps    xmm0, oword [rsi + 4*rdi + 96]
    LONG $0xba145c0f             // subps    xmm2, oword [rdx + 4*rdi]
    WORD $0x590f; BYTE $0xd2     // mulps    xmm2, xmm2
    WORD $0x580f; BYTE $0xd1     // addps    xmm2, xmm1
    LONG $0xba5c5c0f; BYTE $0x20 // subps    xmm3, oword [rdx + 4*rdi + 32]
    WORD $0x590f; BYTE $0xdb     // mulps    xmm3, xmm3
    WORD $0x580f; BYTE $0xda     // addps    xmm3, xmm2
    LONG $0xba645c0f; BYTE $0x40 // subps    xmm4, oword [rdx + 4*rdi + 64]
    WORD $0x590f; BYTE $0xe4     // mulps    xmm4, xmm4
    WORD $0x580f; BYTE $0xe3     // addps    xmm4, xmm3
    LONG $0xba445c0f; BYTE $0x60 // subps    xmm0, oword [rdx + 4*rdi + 96]
    WORD $0x590f; BYTE $0xc0     // mulps    xmm0, xmm0
    WORD $0x580f; BYTE $0xc4     // addps    xmm0, xmm4
    LONG $0x20c78348             // add    rdi, 32
    WORD $0x280f; BYTE $0xc8     // movaps    xmm1, xmm0
    LONG $0x04c08348             // add    rax, 4
	JNE LBB0_9
    WORD $0x854d; BYTE $0xc0     // test    r8, r8
	JE LBB0_7
LBB0_5:
    LONG $0x02e7c148             // shl    rdi, 2
    WORD $0xf749; BYTE $0xd8     // neg    r8
LBB0_6:
    LONG $0x3e0c280f             // movaps    xmm1, oword [rsi + rdi]
    LONG $0x3a0c5c0f             // subps    xmm1, oword [rdx + rdi]
    WORD $0x590f; BYTE $0xc9     // mulps    xmm1, xmm1
    WORD $0x580f; BYTE $0xc1     // addps    xmm0, xmm1
    LONG $0x20c78348             // add    rdi, 32
    WORD $0xff49; BYTE $0xc0     // inc    r8
	JNE LBB0_6
LBB0_7:
    LONG $0xc8160ff3             // movshdup    xmm1, xmm0
    LONG $0xc8580ff3             // addss    xmm1, xmm0
    WORD $0x280f; BYTE $0xd0     // movaps    xmm2, xmm0
    LONG $0xd0150f66             // unpckhpd    xmm2, xmm0
    LONG $0xd1580ff3             // addss    xmm2, xmm1
    LONG $0xe7c0c60f             // shufps    xmm0, xmm0, 231
    LONG $0xc2580ff3             // addss    xmm0, xmm2
    LONG $0x01110ff3             // movss    dword [rcx], xmm0
    RET




TEXT ·_manhattan_distance(SB), $0-32

    MOVQ len+0(FP), DI
    MOVQ a+8(FP), SI
    MOVQ b+16(FP), DX
    MOVQ result+24(FP), CX

    WORD $0x8548; BYTE $0xff     // test    rdi, rdi
	JE LBB1_1
    WORD $0xff48; BYTE $0xcf     // dec    rdi
    LONG $0x03efc148             // shr    rdi, 3
    LONG $0x01478d44             // lea    r8d, [rdi + 1]
    LONG $0x01e08341             // and    r8d, 1
    WORD $0x8548; BYTE $0xff     // test    rdi, rdi
	JE LBB1_3
    LONG $0xff408d49             // lea    rax, [r8 - 1]
    WORD $0x2948; BYTE $0xf8     // sub    rax, rdi
    WORD $0x570f; BYTE $0xc0     // xorps    xmm0, xmm0
    WORD $0xff31                 // xor    edi, edi
LBB1_8:
    LONG $0xbe0c280f             // movaps    xmm1, oword [rsi + 4*rdi]
    LONG $0xbe54280f; BYTE $0x20 // movaps    xmm2, oword [rsi + 4*rdi + 32]
    LONG $0xba0c5c0f             // subps    xmm1, oword [rdx + 4*rdi]
    WORD $0x590f; BYTE $0xc9     // mulps    xmm1, xmm1
    WORD $0x510f; BYTE $0xc9     // sqrtps    xmm1, xmm1
    WORD $0x580f; BYTE $0xc8     // addps    xmm1, xmm0
    LONG $0xba545c0f; BYTE $0x20 // subps    xmm2, oword [rdx + 4*rdi + 32]
    WORD $0x590f; BYTE $0xd2     // mulps    xmm2, xmm2
    WORD $0x510f; BYTE $0xc2     // sqrtps    xmm0, xmm2
    WORD $0x580f; BYTE $0xc1     // addps    xmm0, xmm1
    LONG $0x10c78348             // add    rdi, 16
    LONG $0x02c08348             // add    rax, 2
	JNE LBB1_8
    WORD $0x854d; BYTE $0xc0     // test    r8, r8
	JNE LBB1_5
	JMP LBB1_6
LBB1_1:
    WORD $0x570f; BYTE $0xc0     // xorps    xmm0, xmm0
	JMP LBB1_6
LBB1_3:
    WORD $0x570f; BYTE $0xc0     // xorps    xmm0, xmm0
    WORD $0xff31                 // xor    edi, edi
    WORD $0x854d; BYTE $0xc0     // test    r8, r8
	JE LBB1_6
LBB1_5:
    LONG $0xbe0c280f             // movaps    xmm1, oword [rsi + 4*rdi]
    LONG $0xba0c5c0f             // subps    xmm1, oword [rdx + 4*rdi]
    WORD $0x590f; BYTE $0xc9     // mulps    xmm1, xmm1
    WORD $0x510f; BYTE $0xc9     // sqrtps    xmm1, xmm1
    WORD $0x580f; BYTE $0xc1     // addps    xmm0, xmm1
LBB1_6:
    LONG $0xc8160ff3             // movshdup    xmm1, xmm0
    LONG $0xc8580ff3             // addss    xmm1, xmm0
    WORD $0x280f; BYTE $0xd0     // movaps    xmm2, xmm0
    LONG $0xd0150f66             // unpckhpd    xmm2, xmm0
    LONG $0xd1580ff3             // addss    xmm2, xmm1
    LONG $0xe7c0c60f             // shufps    xmm0, xmm0, 231
    LONG $0xc2580ff3             // addss    xmm0, xmm2
    LONG $0x01110ff3             // movss    dword [rcx], xmm0
    RET




TEXT ·_cosine_similarity_dot_norm(SB), $0-40

    MOVQ len+0(FP), DI
    MOVQ a+8(FP), SI
    MOVQ b+16(FP), DX
    MOVQ dot+24(FP), CX
    MOVQ norm_squared+32(FP), R8

    WORD $0x8548; BYTE $0xff     // test    rdi, rdi
	JE LBB2_1
    WORD $0xff48; BYTE $0xcf     // dec    rdi
    LONG $0x03efc148             // shr    rdi, 3
    LONG $0x014f8d44             // lea    r9d, [rdi + 1]
    LONG $0x01e18341             // and    r9d, 1
    WORD $0x8548; BYTE $0xff     // test    rdi, rdi
	JE LBB2_3
    LONG $0xff418d49             // lea    rax, [r9 - 1]
    WORD $0x2948; BYTE $0xf8     // sub    rax, rdi
    WORD $0x570f; BYTE $0xdb     // xorps    xmm3, xmm3
    WORD $0xff31                 // xor    edi, edi
    WORD $0x570f; BYTE $0xe4     // xorps    xmm4, xmm4
    WORD $0x570f; BYTE $0xd2     // xorps    xmm2, xmm2
LBB2_8:
    LONG $0xbe2c280f             // movaps    xmm5, oword [rsi + 4*rdi]
    LONG $0xbe4c280f; BYTE $0x20 // movaps    xmm1, oword [rsi + 4*rdi + 32]
    LONG $0xba34280f             // movaps    xmm6, oword [rdx + 4*rdi]
    LONG $0xba44280f; BYTE $0x20 // movaps    xmm0, oword [rdx + 4*rdi + 32]
    WORD $0x280f; BYTE $0xfd     // movaps    xmm7, xmm5
    WORD $0x590f; BYTE $0xfe     // mulps    xmm7, xmm6
    WORD $0x580f; BYTE $0xfa     // addps    xmm7, xmm2
    WORD $0x590f; BYTE $0xed     // mulps    xmm5, xmm5
    WORD $0x580f; BYTE $0xec     // addps    xmm5, xmm4
    WORD $0x590f; BYTE $0xf6     // mulps    xmm6, xmm6
    WORD $0x580f; BYTE $0xf3     // addps    xmm6, xmm3
    WORD $0x280f; BYTE $0xd1     // movaps    xmm2, xmm1
    WORD $0x590f; BYTE $0xd0     // mulps    xmm2, xmm0
    WORD $0x580f; BYTE $0xd7     // addps    xmm2, xmm7
    WORD $0x590f; BYTE $0xc9     // mulps    xmm1, xmm1
    WORD $0x580f; BYTE $0xcd     // addps    xmm1, xmm5
    WORD $0x590f; BYTE $0xc0     // mulps    xmm0, xmm0
    WORD $0x580f; BYTE $0xc6     // addps    xmm0, xmm6
    LONG $0x10c78348             // add    rdi, 16
    WORD $0x280f; BYTE $0xd8     // movaps    xmm3, xmm0
    WORD $0x280f; BYTE $0xe1     // movaps    xmm4, xmm1
    LONG $0x02c08348             // add    rax, 2
	JNE LBB2_8
    WORD $0x854d; BYTE $0xc9     // test    r9, r9
	JNE LBB2_5
	JMP LBB2_6
LBB2_1:
    WORD $0x570f; BYTE $0xd2     // xorps    xmm2, xmm2
    WORD $0x570f; BYTE $0xc9     // xorps    xmm1, xmm1
    WORD $0x570f; BYTE $0xc0     // xorps    xmm0, xmm0
	JMP LBB2_6
LBB2_3:
    WORD $0x570f; BYTE $0xc0     // xorps    xmm0, xmm0
    WORD $0xff31                 // xor    edi, edi
    WORD $0x570f; BYTE $0xc9     // xorps    xmm1, xmm1
    WORD $0x570f; BYTE $0xd2     // xorps    xmm2, xmm2
    WORD $0x854d; BYTE $0xc9     // test    r9, r9
	JE LBB2_6
LBB2_5:
    LONG $0xbe1c280f             // movaps    xmm3, oword [rsi + 4*rdi]
    LONG $0xba24280f             // movaps    xmm4, oword [rdx + 4*rdi]
    WORD $0x280f; BYTE $0xeb     // movaps    xmm5, xmm3
    WORD $0x590f; BYTE $0xdc     // mulps    xmm3, xmm4
    WORD $0x590f; BYTE $0xe4     // mulps    xmm4, xmm4
    WORD $0x580f; BYTE $0xc4     // addps    xmm0, xmm4
    WORD $0x590f; BYTE $0xed     // mulps    xmm5, xmm5
    WORD $0x580f; BYTE $0xcd     // addps    xmm1, xmm5
    WORD $0x580f; BYTE $0xd3     // addps    xmm2, xmm3
LBB2_6:
    LONG $0xda160ff3             // movshdup    xmm3, xmm2
    LONG $0xda580ff3             // addss    xmm3, xmm2
    WORD $0x280f; BYTE $0xe2     // movaps    xmm4, xmm2
    LONG $0xe2150f66             // unpckhpd    xmm4, xmm2
    LONG $0xe3580ff3             // addss    xmm4, xmm3
    LONG $0xe7d2c60f             // shufps    xmm2, xmm2, 231
    LONG $0xd4580ff3             // addss    xmm2, xmm4
    LONG $0x11110ff3             // movss    dword [rcx], xmm2
    LONG $0xd1160ff3             // movshdup    xmm2, xmm1
    LONG $0xd1580ff3             // addss    xmm2, xmm1
    WORD $0x280f; BYTE $0xd9     // movaps    xmm3, xmm1
    LONG $0xd9150f66             // unpckhpd    xmm3, xmm1
    LONG $0xda580ff3             // addss    xmm3, xmm2
    LONG $0xe7c9c60f             // shufps    xmm1, xmm1, 231
    LONG $0xcb580ff3             // addss    xmm1, xmm3
    LONG $0xd0160ff3             // movshdup    xmm2, xmm0
    LONG $0xd0580ff3             // addss    xmm2, xmm0
    WORD $0x280f; BYTE $0xd8     // movaps    xmm3, xmm0
    LONG $0xd8150f66             // unpckhpd    xmm3, xmm0
    LONG $0xda580ff3             // addss    xmm3, xmm2
    LONG $0xe7c0c60f             // shufps    xmm0, xmm0, 231
    LONG $0xc3580ff3             // addss    xmm0, xmm3
    LONG $0xc1590ff3             // mulss    xmm0, xmm1
    LONG $0x110f41f3; BYTE $0x00 // movss    dword [r8], xmm0
    RET
